import java.security.MessageDigest

buildscript {
  if ("$gradle.gradleVersion" != "6.7") {
    throw new GradleException("Gradle version 6.7 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.4.10"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0"
    classpath "com.nabilhachicha:android-native-dependencies:0.1.2"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.android.tools.build:gradle:4.1.1'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.22.0"
  id "digital.wup.android-maven-publish" version "3.6.2"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  androidBuildToolsVersion = "29.0.2"
  androidCompileSDKVersion = 29
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 29

  if (!project.hasProperty("org.librarysimplified.nexus.username")) {
    throw new IllegalArgumentException(
      "Missing project property: org.librarysimplified.nexus.username")
  } else {
    nyplNexusUsername = project.property("org.librarysimplified.nexus.username")
    assert (nyplNexusUsername != null)
  }

  if (!project.hasProperty("org.librarysimplified.nexus.password")) {
    throw new IllegalArgumentException(
      "Missing project property: org.librarysimplified.nexus.password")
  } else {
    nyplNexusPassword = project.property("org.librarysimplified.nexus.password")
    assert (nyplNexusPassword != null)
  }

  if (!project.hasProperty("org.librarysimplified.openebooks.keyPassword")) {
    throw new IllegalArgumentException(
      "Missing project property: org.librarysimplified.openebooks.keyPassword")
  } else {
    nyplSigningKeyPassword = project.property("org.librarysimplified.openebooks.keyPassword")
    assert (nyplSigningKeyPassword != null)
  }

  if (!project.hasProperty("org.librarysimplified.openebooks.storePassword")) {
    throw new IllegalArgumentException(
      "Missing project property: org.librarysimplified.openebooks.storePassword")
  } else {
    nyplSigningStorePassword = project.property("org.librarysimplified.openebooks.storePassword")
    assert (nyplSigningStorePassword != null)
  }

  if (!project.hasProperty("org.librarysimplified.openebooks.keyAlias")) {
    throw new IllegalArgumentException(
      "Missing project property: org.librarysimplified.openebooks.keyAlias")
  } else {
    nyplSigningKeyAlias = project.property("org.librarysimplified.openebooks.keyAlias")
    assert (nyplSigningKeyAlias != null)
  }

  if (!project.hasProperty("org.librarysimplified.nexus.password")) {
    throw new IllegalArgumentException(
      "Missing project property: org.librarysimplified.nexus.password")
  } else {
    nyplNexusPassword = project.property("org.librarysimplified.nexus.password")
    assert (nyplNexusPassword != null)
  }

  if (project.hasProperty("org.librarysimplified.no_signing")) {
    disableSigning = true
    logger.warn("org.librarysimplified.no_signing is set: We will not sign artifacts")
  } else {
    disableSigning = false
    logger.warn("org.librarysimplified.no_signing is not set: We will attempt to sign artifacts")
  }

  nyplFindawayVersion = "6.0.0"
  simplifiedVersion = "6.4.0"
  firebaseVersion = "17.2.2"
}

subprojects {
  //
  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

ext.libraries = [
  firebaseAnalytics                  : "com.google.firebase:firebase-analytics:${firebaseVersion}",
  firebaseCrashlytics                : "com.google.firebase:firebase-crashlytics:17.0.0-beta04",
  googleAutoValue                    : "com.google.auto.value:auto-value:1.5",
  instabug                           : "com.instabug.library:instabug:9.1.3",
  nyplDRMAdobeProvider               : "org.librarysimplified.drm.adobe:org.librarysimplified.drm.adobe.provider:1.1.27",
  nyplDRMCore                        : "org.librarysimplified.drm:org.librarysimplified.drm.core:1.1.2",
  nyplFindaway                       : "org.librarysimplified.audiobook.audioengine:org.librarysimplified.audiobook.audioengine.core:${nyplFindawayVersion}",
  simplifiedAccountSourceNYPLRegistry: "org.librarysimplified:org.librarysimplified.accounts.source.nyplregistry:${simplifiedVersion}",
  simplifiedAnalyticsCirculation     : "org.librarysimplified:org.librarysimplified.analytics.circulation:${simplifiedVersion}",
  simplifiedMain                     : "org.librarysimplified:org.librarysimplified.main:${simplifiedVersion}",
  simplifiedMigrationFrom3Master     : "org.librarysimplified:org.librarysimplified.migration.from3master:${simplifiedVersion}",
  slf4j                              : "org.slf4j:slf4j-api:1.7.25",
]

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

static def sha256Of(File file) {
  MessageDigest digest = MessageDigest.getInstance("SHA-256")
  digest.update(file.getBytes())
  return digest.digest().encodeHex().toString()
}

task preFlightChecks {
  logger.info("running pre-flight checks")

  def requiredFiles = [:]
  requiredFiles["app/google-services.json"] =
    "ee214bab03f454f7ae953acc50fbbe53301d11ae8dff062d112c6cb4f5cf136e"
  requiredFiles["app/keystore.jks"] =
    "ce7c883508ff259682fbdb5eb462e7bf43937d42c7fcc6aa73eb9120d56d48b7"
  requiredFiles["app/src/main/assets/ReaderClientCert.sig"] =
    "633ef827f8815c40f077ffcdb8edae7a7ad00aedd5806438abdaf48e9c3b59fe"

  def missingFiles = []
  for (entry in requiredFiles) {
    logger.info("Checking ${entry.key} exists and has expected digest value")

    try {
      def received = sha256Of(file(entry.key))
      def expected = entry.value
      if (received != expected) {
        logger.error("ERROR: File ${entry.key} has incorrect SHA-256 hash")
        logger.error("  Expected: ${expected}")
        logger.error("  Received: ${received}")
        missingFiles.add(entry.key)
      }
    } catch (Exception e) {
      logger.error("ERROR: Could not open required file ${entry.key}: ${e.getClass()}: ${e.getMessage()}")
      missingFiles.add(entry.key)
    }
  }

  if (!missingFiles.isEmpty()) {
    throw new FileNotFoundException("One or more required files are missing or have incorrect contents.")
  }
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}
-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          multiDexEnabled true
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"

  publishing {
    publications {
      basicJar(MavenPublication) {

        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "apk":
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = "io7m"
              name = "Mark Raynsford"
              email = "code@io7m.com"
              url = "https://www.io7m.com"
            }
            developer {
              id = "winniequinn"
              name = "Winnie Quinn"
              url = "https://www.winniequinn.com/"
            }
            developer {
              id = "gioneill"
              name = "Greg O'Neill"
              url = "https://github.com/gioneill"
            }
            developer {
              id = "mattniehoff"
              name = "Matt Niehoff"
              url = "https://github.com/mattniehoff"
            }
            developer {
              id = "MalcolmMcFly"
              name = "Malcolm Woods"
              url = "https://github.com/MalcolmMcFly"
            }
            developer {
              id = "twaddington"
              name = "Tristan Waddington"
              url = "https://github.com/twaddington"
            }
          }
        }
      }
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()

    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
      credentials {
        username findProperty("org.librarysimplified.nexus.username")
        password findProperty("org.librarysimplified.nexus.password")
      }
      url "https://nexus.librarysimplified.org:8443/nexus/content/groups/external/"
    }

    maven { url "https://jitpack.io" }

    jcenter()
    google()

    maven {
      url "http://maven.findawayworld.com/artifactory/libs-release/"
    }
  }
}
